on:
  push:
    branches:
      - master


name: Build and Release Apps
jobs:
  build:
    name: Run tests and analyze code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Dart
        uses: dart-lang/setup-dart@v1
      - name: Install pub Dependencies
        run: dart pub get
      - name: Analyze code
        run: dart analyze
      - name: Run Tests
        run: dart test

  release:
    needs: build
    name: Build binaries and Create release if tagged
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        include:
          - os: ubuntu-latest
            output-name: obs_command-linux
          - os: macOS-latest
            output-name: obs_command-mac
          - os: windows-latest
            output-name: obs_command-windows.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Dart
        uses: dart-lang/setup-dart@v1
      - name: Install pub Dependencies
        run: dart pub get
      - name: Make build dir
        run: mkdir build
      - name: Build Artifacts
        run: dart compile exe -o build/${{matrix.output-name}} bin/obs_command.dart
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: native-executeables
          path: build
     - name: Create Release Notes
       id: release_notes
       uses: mikepenz/release-changelog-builder-action@v1
       if: startsWith(github.ref, 'refs/tags/')
       env:
         GITHUB_TOKEN: ${{ secrets.TOKEN }}
     - name: Create Release
       uses: softprops/action-gh-release@v1
       if: startsWith(github.ref, 'refs/tags/')
       with:
         draft: true
         body_path: ${{steps.release_notes.outputs.changelog}}
         files: |
           bin/obs_command-linux
           bin/obs_command-mac
           bin/obs_command-windows.exe
       env:
         GITHUB_TOKEN: ${{secrets.TOKEN}}
